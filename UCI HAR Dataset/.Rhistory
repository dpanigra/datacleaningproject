q90
q()
q()
install.packages("devtools")
install.packages("devtools")
getwd()
exit()
quit()
?which
search()
search()
search()
search()
x <- 0 y <- 1
x <- as.Date("2012-03-01") y <- as.Date("2012-02-28")
x <- as.Date("2012-03-01")
y <- as.Date("2012-02-28")
x - y
cube <- function(x, n) {
x^3
}
cube(3)
quit()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
quit()
swirl()
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(median, c(1.4,3.6, 7.9, 8.8))
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Good", "morning")
submit()
submit()
submit()
submit()
mad_libs("Place", "Adjective", "Noun")
submit()
"I"%p%"love"%p%"R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(falgs$orange)
sum(flags$orange)
flags_colors <- flags[,11:17]
View(flags_colors)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_color, sum)
lapply(flag_colors, sum)
slapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flasgs$landmass)
table(flags$landmass)
table(flags$anmiate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summart(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x_mean <- cachemean(c(2,4))
a <- makeVector(c(1,2,3,4))
a
cachemean(a)
cachemean(a)
cachemean(a)
cachemean(a)
a
a
x
mean
print mean
print(mean)
m
source('C:/dev/DSR/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
source('C:/dev/DSR/ProgrammingAssignment2/cachematrix.R')
?inverse
source('C:/dev/DSR/ProgrammingAssignment2/cachematrix.R')
x <- c(1:5)
x
inverse(x)
?inverse
?solve
source('C:/dev/DSR/ProgrammingAssignment2/cachematrix.R')
?matrix
my_matrix <- matrix(3,4,1:12)
my_matrix
my_matrix <- matrix(nrow=3,ncol=4,1:12)
my_matrix
my_matrix_t <- solve(my_matrix)
my_matrix <- matrix(nrow=4,ncol=4,1:16)
my_matrix_t <- solve(my_matrix)
my_matrix
class(my_matrix)
my_matrix_t <- solve(my_matrix, ...)
my_matrix
my_m <- makeCacheMatrix(my_matrix)
cacheSolve(my_m)
solve (my_matrix)
my_matrix <- matrix(1:16, nrow=4, ncol=4)
my_matrix
my_m <- makeCacheMatrix(my_matrix)
solve (my_matrix)
my_matrix <- matrix(c(1:16), nrow=4, ncol=4)
solve (my_matrix)
my_matrix <- matrix(c(1:16), nrow=4, ncol=4)
my_m <- makeCacheMatrix(my_matrix)
cacheSolve(my_m)
m <- matrix(c(3,7,0,4), nrow = 2, ncol = 2)
m
cm <- makeCacheMatrix(m)
cm
ccm <- cacheSolve(cm)
ccm
ccm <- cacheSolve(cm)
class(ccm)
class(cm)
exit()
quit()
lm
str(lm)
library("swirl")
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = T, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = T, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7
)
flips2 <- sum(rbinom(1, size = 100, prob = 0.7))
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n=1, size = 1, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n=100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5)
rpois(5, lambada=1)
rnorm(10, mean=100, sd=25)
rpois(5, 10)
rpois(5, mean=10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unlcass(d2)
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.t)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
Use difftime(Sys.time(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plat(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(cars)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
load(mtcars)
mtcars
data(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(data=mtcars, formula=mpg ~ cyl)
boxplot(data=mtcars, formula="mpg ~ cyl"")
""
boxplot(data=mtcars, formula="mpg ~ cyl")
boxplot(mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
quit()
sset.seed(1)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?seed
?ppois
?qpois
quit()
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
install.package('dbConnect')
install.packages('RMySQL')
library(RMySQL)
install.packages('Rxslx')
install.packages('Rxlsx')
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, 'show databases;')
dbDisconnect(ucscDb)
result
library(XML)
library(xslx)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
rm(github_token)
rm(myapp)
rm (result)
rm(ucscDb)
oauth_endpoints("github")
myapp <- oauth_app("github", "958712a93479e4fe8bcb", "fe5c54071414dfa67bd4c620f8f756029864008f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("DataScienceCourse")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("DataScienceCourse"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp
github_token
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/DataScienceCourse", gtoken)
stop_for_status(req)
rm(list=ls())
oauth_endpoints("github")
myapp <- oauth_app("github", "958712a93479e4fe8bcb", "fe5c54071414dfa67bd4c620f8f756029864008f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
rm(list=ls())
oauth_endpoints("github");
myapp <- oauth_app("github", "958712a93479e4fe8bcb", "fe5c54071414dfa67bd4c620f8f756029864008f");
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
qit()
quit()
rm(list=ls())
x_train_ds <- read.table("train/X_train.txt")
getwd()
setwd("data")
?file
x_train_ds <- read.table("train/X_train.txt")
setwd("../assignment")
x_train_ds <- read.table("train/X_train.txt")
setwd("UCI HAR Dataset"); getwd()
x_train_ds <- read.table("train/X_train.txt")
x_test_ds <- read.table("test/X_test.txt")
x_train_test_ds <- rbind(x_train_ds, x_test_ds)
subject_train_ds <- read.table("train/subject_train.txt")
subject_test_ds <- read.table("test/subject_test.txt")
subject_train_test_ds <- rbind(subject_train_ds, subject_test_ds)
subject_train_test_ds <- rbind(subject_train_ds, subject_test_ds)
y_train_ds <- read.table("train/y_train.txt")
y_test_ds <- read.table("test/y_test.txt")
y_train_test_ds <- rbind(y_train_ds, y_test_ds)
features <- read.table("features.txt")
names(features) <- c('feature_id', 'feature_name')
index_features_mean_std <- grep("-mean\\()|-std\\()", features$feature_name)
x_train_test_ds <- x_train_test_ds[, index_features_mean_std]
str(index_features_mean_std)
summary(index_features_mean_std)
head(index_features_mean_std)
class(index_features_mean_std)
x_train_test_ds <- x_train_test_ds[, index_features_mean_std]
x_train_test_ds <- x_train_test_ds[, index_features_mean_std]
index_features_mean_std <- grep("-mean\\()|-std\\()", features$feature_name)
x_train_test_ds <- x_train_test_ds[, index_features_mean_std]
x_train_test_ds <- rbind(x_train_ds, x_test_ds)
x_train_test_ds <- x_train_test_ds[, index_features_mean_std]
features[index_features_mean_std, 2]
View(x_train_test_ds)
View(x_train_test_ds)
names_features_mean_std <- features[index_features_mean_std, 2]
class (names_features_mean_std)
names(x_train_test_ds) <- gsub("\\(|\\)", "", names_features_mean_std)
View(x_train_test_ds)
View(x_train_test_ds)
activities <- read.table("activity_labels.txt")
View(activities)
View(activities)
View(y_train_test_ds)
View(y_train_test_ds)
names(activities) <- "Activity"
View(activities)
View(activities)
activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
View(activities)
View(activities)
View(y_train_test_ds)
View(y_train_test_ds)
y_train_test_ds[,1]
y_train_test_ds[1]
class(y_train_test_ds[,1])
str(y_train_test_ds[,1])
summary(y_train_test_ds[,1])
summary(y_train_test_ds[1])
class(y_train_test_ds[1])
activities[y_train_test_ds[,1], 2]
y_train_ds <- read.table("train/y_train.txt")
y_test_ds <- read.table("test/y_test.txt")
y_train_test_ds <- rbind(y_train_ds, y_test_ds)
y_test_ds <- read.table("test/y_test.txt")
y_train_test_ds <- rbind(y_train_ds, y_test_ds)
activities <- read.table("activity_labels.txt")
#activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
y_train_test_ds[,1] = activities[y_train_test_ds[,1], 2]
names(y_train_test_ds) <- "Activity"
View(y_train_test_ds)
View(y_train_test_ds)
View(x_train_test_ds)
View(x_train_test_ds)
View(features)
View(features)
View(features)
View(features)
View(subject_train_test_ds)
View(subject_train_test_ds)
names(subject_train_test_ds) <- "Subject"
View(subject_train_ds)
View(subject_train_ds)
View(subject_train_test_ds)
View(subject_train_test_ds)
View(subject_train_test_ds)
View(subject_train_test_ds)
View(y_train_test_ds)
View(y_train_test_ds)
View(x_train_test_ds)
View(x_train_test_ds)
all_data <- cbind(subject_train_test_ds, y_train_test_ds, x_train_test_ds)
View(all_data)
View(all_data)
View(all_data)
View(all_data)
write.table(all_data, "merged_clean_data.txt")
all_data_avg <- all_data[, 3:dim(all_data)[2]]
all_data_avg_ds <- aggregate(all_data_avg,list(all_data$Subject, all_data$Activity), mean)
View(all_data_avg)
View(all_data_avg)
View(all_data_avg_ds)
View(all_data_avg_ds)
write.table(all_data_avg_ds, "data_set_with_the_averages.txt")
names(all_data_avg_ds)[1] <- "Subject"
names(all_data_avg_ds)[2] <- "Activity"# Created csv (tidy data set) in diretory
write.table(all_data_avg_ds, "data_set_with_the_averages.txt")
write.table(all_data_avg_ds, "data_set_with_the_averages_rnf.txt", row.name=FALSE)
rm(list=ls())
quit()
quit()
